/* This file was auto generated by libwmtgl. Don't edit directly. */

/*
 * Copyright (c) 2011 WonderMedia Technologies, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * WonderMedia Technologies, Inc.
 * 10F, 529, Chung-Cheng Road, Hsin-Tien, Taipei 231, R.O.C
 */

#ifndef COM_GE_H
#define COM_GE_H

#ifdef __cplusplus
extern "C" {
#endif

/* import ./include/gmp.h */

/* Generic Memory Provider */

#ifndef GMP_H
#define GMP_H

#ifdef __POST__
#undef __KERNEL__
#undef __LINUX__
#endif

#ifdef __KERNEL__
#include <linux/types.h>
#include <linux/fb.h>
#else
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#endif

#ifndef __POST__
#define USE_UMP
#endif /* __POST__ */

#define GMP_IOCTL_MAGIC        'g'
#define GMP_GET_PHYS           _IOW(GMP_IOCTL_MAGIC,  1, unsigned int)
/* #define GMP_MAP             _IOW(GMP_IOCTL_MAGIC,  2, unsigned int) */
#define GMP_GET_SIZE           _IOW(GMP_IOCTL_MAGIC,  3, unsigned int)
/* #define GMP_UNMAP           _IOW(GMP_IOCTL_MAGIC,  4, unsigned int) */
/* #define GMP_ALLOCATE        _IOW(GMP_IOCTL_MAGIC,  5, unsigned int) */
/* #define GMP_CONNECT         _IOW(GMP_IOCTL_MAGIC,  6, unsigned int) */
/* #define GMP_GET_TOTAL_SIZE  _IOW(GMP_IOCTL_MAGIC,  7, unsigned int) */
#define GMP_CACHE_FLUSH        _IOW(GMP_IOCTL_MAGIC,  8, unsigned int)
#define GMP_CACHE_FLUSH_ALL    _IOW(GMP_IOCTL_MAGIC, 10, unsigned int)

#ifdef USE_UMP
#define GMP_ALLOC_UMP          _IOW(GMP_IOCTL_MAGIC, 11, unsigned int)
#define GMP_FREE_UMP           _IOW(GMP_IOCTL_MAGIC, 12, unsigned int)
#define GMP_GET_UMP_PHYS       _IOW(GMP_IOCTL_MAGIC, 13, unsigned int)
#define GMP_GET_UMP_SIZE       _IOW(GMP_IOCTL_MAGIC, 14, unsigned int)
#endif /* USE_UMP */

#define GMP_LOCK               _IOW(GMP_IOCTL_MAGIC, 15, unsigned int)

#ifdef USE_UMP
#define GMP_MAP_UMP            _IOW(GMP_IOCTL_MAGIC, 16, unsigned int)
#define GMP_UNMAP_UMP          _IOW(GMP_IOCTL_MAGIC, 17, unsigned int)
#define GMP_GET_MB             _IOW(GMP_IOCTL_MAGIC, 18, unsigned int)
#define GMP_PUT_MB             _IOW(GMP_IOCTL_MAGIC, 19, unsigned int)
#endif /* USE_UMP */

#define GMP_SHIFT         (16) /* 64 KB */
#define GMP_MASK          ((1 << GMP_SHIFT) - 1)
#define GMP_NR(descr)     (1 << descr->order)
#define GMP_SIZE(descr)   (GMP_NR(descr) << GMP_SHIFT)

#define GMP_LOG_EMERG     0   /* system is unusable                   */
#define GMP_LOG_ALERT     1   /* action must be taken immediately     */
#define GMP_LOG_CRIT      2   /* critical conditions                  */
#define GMP_LOG_ERR       3   /* error conditions                     */
#define GMP_LOG_WARNING   4   /* warning conditions                   */
#define GMP_LOG_NOTICE    5   /* normal but significant condition     */
#define GMP_LOG_INFO      6   /* informational                        */
#define GMP_LOG_DEBUG     7   /* debug-level messages                 */

#define GMP_TAG_DEFAULT   (0x30303030) /* 0000 in ascii */
#define GMP_TAG_UMP       (0x20706d75) /* ump  in ascii */

struct gmdesc {
	unsigned long pa;
	int order;
	int used;
	unsigned int tag;
	pid_t owner;
	int tail;
#ifdef USE_UMP
	unsigned int secure_id;
#endif /* USE_UMP */
};

struct gmp {
	struct gmdesc *gmdesc;
	unsigned long pa;
	int len;
	unsigned long hnd;
	struct gmdesc *cached;
};

struct gmp_region {
	unsigned long pa;
	unsigned long len;
};

struct gmp *create_gmp(unsigned long pa, size_t size);
void release_gmp(struct gmp *gmp);

int gmp_lock(struct gmp *gmp);
int gmp_unlock(struct gmp *gmp);

unsigned long gmp_alloc(struct gmp *gmp, size_t size, unsigned int tag);
void gmp_free(struct gmp *gmp, unsigned long pa);

unsigned int gmp_itag(unsigned int value);
unsigned int gmp_ctag(char a, char b, char c, char d);

void *gmp_ioremap(struct gmp *gmp, unsigned long physaddr, size_t size);
void gmp_iounmap(struct gmp *gmp, void *va, size_t size);
void gmp_cache_flush(struct gmp *gmp, unsigned long physaddr, size_t size);

/* internal function */

void gmp_reset(struct gmp *gmp);
void gmp_invalidate(struct gmp *gmp, pid_t pid);

void gmp_set_log_level(int level);
void gmp_get_status(struct gmp *gmp, int *used, int *avail);
void gmp_print_status(struct gmp *gmp);

struct gmdesc *prev_gmdesc(struct gmp *gmp, struct gmdesc *gmdesc);
struct gmdesc *next_gmdesc(struct gmp *gmp, struct gmdesc *gmdesc);

#ifdef __KERNEL__
int register_gmp_device(unsigned long physaddr, unsigned long size);
int unregister_gmp_device(void);
#endif /* __KERNEL__ */

#endif /* GMP_H */

/* import ./include/ge_log.h */

#ifndef GE_LOG_H
#define GE_LOG_H

#define GE_LOG_EMERG     0   /* system is unusable                   */
#define GE_LOG_ALERT     1   /* action must be taken immediately     */
#define GE_LOG_CRIT      2   /* critical conditions                  */
#define GE_LOG_ERR       3   /* error conditions                     */
#define GE_LOG_WARNING   4   /* warning conditions                   */
#define GE_LOG_NOTICE    5   /* normal but significant condition     */
#define GE_LOG_INFO      6   /* informational                        */
#define GE_LOG_DEBUG     7   /* debug-level messages                 */

#define ge_log __ge_log

void ge_set_log_level(int level);
int __ge_log(int level, const char *fmt, ...);
#endif /* GE_LOG_H */


/* import ./include/ge_plugin.h */

#ifndef GE_PLUGIN_H
#define GE_PLUGIN_H

#if !defined(__KERNEL__) && !defined(__POST__)
#include <dlfcn.h>
#endif

struct ge_plugin {
	void *handle;
	int errors;
	int ofps;
	int (*wmt_vpp_init)(void);
	int (*wmt_vpp_exit)(void);
	int (*wmt_vpp_scl_drop_line_enable)(int enable);
	int (*wmt_vpp_scl_scale)(void *src_fb, void *dst_fb);
	int (*wmt_vpp_get_framerate)(int mod);
	int (*wmt_vpp_set_framerate)(int mod, int framerate);
	/* video overlay function */
	int (*wmt_vpp_vpu_clr_fbdisp)(void);
	int (*wmt_vpp_vpu_get_fbinfo)(void *fb);
	int (*wmt_vpp_vpu_set_fbinfo)(void *fb);
	int (*wmt_vpp_vpu_get_view)(void *view);
	int (*wmt_vpp_vpu_set_view)(void *view);
	int (*wmt_vpp_govw_set_ge_visible)(int enable);
	int (*wmt_vpp_govw_set_vpu_visible)(int enable);
	int (*wmt_vpp_get_fbinfo)(int mod, void *fb);
	int (*wmt_vpp_set_fbinfo)(int mod, void *fb);
	int (*wmt_vpp_get_resolution)(unsigned int *xres, unsigned int *yres);
	int (*wmt_vpp_set_fbdisp)(void *fb, void *view);
	int (*wmt_vpp_wait_frame)(int cnt);
	/* mb */
	int (*wmt_mb_init)(void);
	int (*wmt_mb_exit)(int fd);
	void (*wmt_mb_get)(int fd, void *user);
	void (*wmt_mb_put)(int fd, void *user);
	unsigned long (*wmt_mb_user2phys)(int fd, void *user);
	void *(*wmt_mb_alloc)(int fd, int size);
	void (*wmt_mb_free)(int fd, void *virt);
};

struct ge_plugin *create_ge_plugin(void);
void release_ge_plugin(struct ge_plugin *plugin);
#endif

/* import ./include/ge_ioctl.h */

#ifndef GE_IOCTL_H
#define GE_IOCTL_H
#ifndef __POST__
#ifndef __KERNEL__
#include <sys/ioctl.h>
#include <linux/ioctl.h>
#endif /* __KERNEL__ */
#define GEIO_MAGIC		0x69
#define GEIO_RESERVED0		_IO(GEIO_MAGIC, 0)	/* VQ_POLL */
#define GEIO_RESERVED1		_IO(GEIO_MAGIC, 1)	/* VQ_UPDATE */
#define GEIO_RESERVED2		_IO(GEIO_MAGIC, 2)	/* VQ_SYNC */
#define GEIO_ROTATE		_IOW(GEIO_MAGIC, 3, void *)
#define GEIO_RESERVED3		_IO(GEIO_MAGIC, 4)
#define GEIOGET_CHIP_ID		_IOR(GEIO_MAGIC, 5, unsigned int)
#define GEIOSET_AMX_EN		_IO(GEIO_MAGIC, 6)
#define GEIO_RESERVED4		_IO(GEIO_MAGIC, 7)	/* AMX_HOLD */
#define GEIO_ALPHA_BLEND	_IO(GEIO_MAGIC, 8)
#define GEIOSET_OSD		_IO(GEIO_MAGIC, 9)
#define GEIOSET_COLORKEY	_IO(GEIO_MAGIC, 10)
#define GEIO_RESERVED6		_IO(GEIO_MAGIC, 11)	/* CLEAR_OSD */
#define GEIO_RESERVED7		_IO(GEIO_MAGIC, 12)	/* SHOW_OSD */
#define GEIO_WAIT_SYNC		_IO(GEIO_MAGIC, 13)
#define GEIO_RESERVED8		_IO(GEIO_MAGIC, 14)	/* RESET_OSD */
#define GEIO_LOCK		_IO(GEIO_MAGIC, 15)
#define GEIO_STOP_LOGO		_IO(GEIO_MAGIC, 18)
#define GEIO_ALLOW_PAN_DISPLAY	_IO(GEIO_MAGIC, 19)
#define GEIO_BLIT               _IO(GEIO_MAGIC, 20)
#define GEIO_STRETCH_BLIT_VPU   _IO(GEIO_MAGIC, 21)
#define GEIO_STRETCH_BLIT_SCL   _IO(GEIO_MAGIC, 22)
#endif /* __POST__ */
#endif /* GE_IOCTL_H */

/* import ./include/ge_regs_def.h */

#ifndef GE_REGS_DEF_H
#define GE_REGS_DEF_H

struct ge_regs_3445 {
	unsigned int ge_command;	/* 0x0000 GE Command */
	unsigned int color_depth;	/* 0x0004 GE Color Depth */
	unsigned int hm_sel;		/* 0x0008 GE High Color Mode Select */
	unsigned int pat_tran_en;	/* 0x000c GE Pattern Transp. Enable */

	unsigned int font_tran_en;	/* 0x0010 GE Font Transparency Enable */
	unsigned int rop_code;		/* 0x0014 GE ROP Code */
	unsigned int ge_fire;		/* 0x0018 GE Fire Code */
	unsigned int rop_bg_code;	/* 0x001c */

	unsigned int src_baddr;		/* 0x0020 GE Source Base Address */
	unsigned int src_disp_w;	/* 0x0024 GE Source Display width */
	unsigned int src_disp_h;	/* 0x0028 GE Source DIsplay height */
	unsigned int src_x_start;	/* 0x002c GE Source X start point */

	unsigned int src_y_start;	/* 0x0030 GE Source Y start point */
	unsigned int src_width;		/* 0x0034 GE Source Width */
	unsigned int src_height;	/* 0x0038 GE Source Height */
	unsigned int des_baddr;		/* 0x003c GE Dest Base Address */

	unsigned int des_disp_w;	/* 0x0040 GE Dest Display width */
	unsigned int des_disp_h;	/* 0x0044 GE Dest DIsplay height */
	unsigned int des_x_start;	/* 0x0048 GE Dest X start point */
	unsigned int des_y_start;	/* 0x004c GE Dest Y start point */

	unsigned int des_width;		/* 0x0050 GE Dest Width */
	unsigned int des_height;	/* 0x0054 GE Dest Height */
	unsigned int font0_buf;		/* 0x0058 GE FONT Color 0 Buffer */
	unsigned int font1_buf;		/* 0x005c GE FONT Color 1 Buffer */

	unsigned int font2_buf;		/* 0x0060 GE FONT Color 2 Buffer*/
	unsigned int font3_buf;		/* 0x0064 GE FONT Color 3 Buffer*/
	unsigned int pat0_buf;		/* 0x0068 GE Pattern 0 Buffer */
	unsigned int pat1_buf;		/* 0x006c GE Pattern 1 Buffer */

	unsigned int pat2_buf;		/* 0x0070 GE Pattern 2 Buffer */
	unsigned int pat3_buf;		/* 0x0074 GE Pattern 3 Buffer */
	unsigned int pat4_buf;		/* 0x0078 GE Pattern 4 Buffer */
	unsigned int pat5_buf;		/* 0x007c GE Pattern 5 Buffer */

	unsigned int pat6_buf;		/* 0x0080 GE Pattern 6 Buffer */
	unsigned int pat7_buf;		/* 0x0084 GE Pattern 7 Buffer */
	unsigned int pat0_color;	/* 0x0088 GE Pattern 0 Color */
	unsigned int pat1_color;	/* 0x008c GE Pattern 1 Color */

	unsigned int pat2_color;	/* 0x0090 GE Pattern 2 Color */
	unsigned int pat3_color;	/* 0x0094 GE Pattern 3 Color */
	unsigned int pat4_color;	/* 0x0098 GE Pattern 4 Color */
	unsigned int pat5_color;	/* 0x009c GE Pattern 5 Color */

	unsigned int pat6_color;	/* 0x00a0 GE Pattern 6 Color */
	unsigned int pat7_color;	/* 0x00a4 GE Pattern 7 Color */
	unsigned int pat8_color;	/* 0x00a8 GE Pattern 8 Color */
	unsigned int pat9_color;	/* 0x00ac GE Pattern 9 Color */

	unsigned int pat10_color;	/* 0x00b0 GE Pattern 10 Color */
	unsigned int pat11_color;	/* 0x00b4 GE Pattern 11 Color */
	unsigned int pat12_color;	/* 0x00b8 GE Pattern 12 Color */
	unsigned int pat13_color;	/* 0x00bc GE Pattern 13 Color */

	unsigned int pat14_color;	/* 0x00c0 GE Pattern 14 Color */
	unsigned int pat15_color;	/* 0x00c4 GE Pattern 15 Color */
	unsigned int ck_sel;		/* 0x00c8 Color Key Select */
	unsigned int src_ck;		/* 0x00cc GE Source Colorkey */

	unsigned int des_ck;		/* 0x00d0 GE Destination Colorkey */
	unsigned int alpha_sel;		/* 0x00d4 GE Alpha Select */
	unsigned int bitblt_alpha;	/* 0x00d8 */
	unsigned int des_path_en;	/* 0x00dc DES Read Path Enable */

	unsigned int rotate_mode;	/* 0x00e0 GE Rotate Mode */
	unsigned int mirror_mode;	/* 0x00e4 GE Mirror Mode */
	unsigned int ge_delay;		/* 0x00e8 GE Start Cycle Delay */
	unsigned int ge_eng_en;		/* 0x00ec GE Engine Enable */

	unsigned int ge_int_en;		/* 0x00f0 GE Intr. Enable signal */
	unsigned int ge_int_flag;	/* 0x00f4 GE Interrupt Flag */
	unsigned int ge_status;		/* 0x00f8 GE AMX Status */
	unsigned int ge_swid;		/* 0x00fc GE Software Identify */

	unsigned int ln_x_start;	/* 0x0100 */
	unsigned int ln_x_end;		/* 0x0104 */
	unsigned int ln_y_start;	/* 0x0108 */
	unsigned int reserved2;		/* 0x010c Reserved */

	unsigned int ln_y_end;		/* 0x0110 */
	unsigned int ln_tck;		/* 0x0114 */
	unsigned int amx_csc_bypass;	/* 0x0118 GE AMX CSC Bypass */
	unsigned int c1_coef;		/* 0x011c */

	unsigned int ln_stl_tb;		/* 0x0120 */
	unsigned int ln_stl_rtn;	/* 0x0124 */
	unsigned int ln_stl_data;	/* 0x0128 */
	unsigned int ln_stl_apa;	/* 0x012c */

	unsigned int bc_p1x;		/* 0x0130 */
	unsigned int bc_p1y;		/* 0x0134 */
	unsigned int bc_p2x;		/* 0x0138 */
	unsigned int bc_p2y;		/* 0x013c */

	unsigned int bc_p3x;		/* 0x0140 */
	unsigned int bc_p3y;		/* 0x0144 */
	unsigned int bc_color;		/* 0x0148 */
	unsigned int bc_alpha;		/* 0x014c */

	unsigned int bc_delta_t;	/* 0x0150 */
	unsigned int bc_l_stl;		/* 0x0154 */
	unsigned int bc_l_stl_rtn;	/* 0x0158 */
	unsigned int c2_coef;		/* 0x015c */

	unsigned int c3_coef;		/* 0x0160 */
	unsigned int c4_coef;		/* 0x0164 */
	unsigned int c5_coef;		/* 0x0168 */
	unsigned int c6_coef;		/* 0x016c */

	unsigned int c7_coef;		/* 0x0170 */
	unsigned int c8_coef;		/* 0x0174 */
	unsigned int yuy2_y_baddr;	/* 0x0178 YUY2 Y Base Address */
	unsigned int yuy2_c_baddr;	/* 0x017c YUY2 C Base Address */

	unsigned int vq_en;		/* 0x0180 VQ Enable */
	unsigned int vq_size;		/* 0x0184 VQ Buffer Size */
	unsigned int vq_udptr;		/* 0x0188 VQ Pointer Update */
	unsigned int vq_baseaddr;	/* 0x018c VQ Buffer Base Address */

	unsigned int vq_wrsize;		/* 0x0190 VQ Free Buffer Space */
	unsigned int vq_staddrw;	/* 0x0194 DRAM Access Address */
	unsigned int vq_thr;		/* 0x0198 VQ Lower Intr. Threshold */
	unsigned int yuy2_y_fbw;	/* 0x019c YUY2 Y FB Width */

	unsigned int rop4_en;		/* 0x01a0 */
	unsigned int alpha_plane_en;	/* 0x01a4 */
	unsigned int mask_baddr;	/* 0x01a8 */
	unsigned int mask_disp_w;	/* 0x01ac */

	unsigned int mask_disp_h;	/* 0x01b0 */
	unsigned int mask_x_start;	/* 0x01b4 */
	unsigned int mask_y_start;	/* 0x01b8 */
	unsigned int mask_width;	/* 0x01bc */

	unsigned int mask_height;	/* 0x01c0 */
	unsigned int dw_mask_baddr;	/* 0x01c4 */
	unsigned int alpha_plane_wbe;	/* 0x01c8 */
	unsigned int yuy2_c_fbw;	/* 0x01cc YUY2 C FB Width */

	unsigned int adap_blend_en;	/* 0x01d0 (New!) */
	unsigned int src_alpha_sel;	/* 0x01d4 (New!) */
	unsigned int src_blend_apa;	/* 0x01d8 (New!) */
	unsigned int des_alpha_sel;	/* 0x01dc (New!) */

	unsigned int des_blend_apa;	/* 0x01e0 (New!) */
	unsigned int adap_clamp_en;	/* 0x01e4 (New!) */
	unsigned int yuy2_c_blend_sel;	/* 0x01e8 YUY2 C Blending Select */
	unsigned int src_indep_mode;	/* 0x01ec Source Indep. color mode */

	unsigned int c9_coef;		/* 0x01f0 */
	unsigned int coef_i;		/* 0x01f4 */
	unsigned int coef_j;		/* 0x01f8 */
	unsigned int coef_k;		/* 0x01fc */

	unsigned int g1_cd;		/* 0x0200 G1 Color Depth */
	unsigned int g2_cd;		/* 0x0204 G2 Color Depth */
	unsigned int reserved5[2];	/* 0x0208 - 0x020c Reserved */

	unsigned int g1_fg_addr;	/* 0x0210 G1 FG Start Address */
	unsigned int g1_bg_addr;	/* 0x0214 G1 BG Start Address */
	unsigned int g1_fb_sel;		/* 0x0218 G1 Framebuffer Select */
	unsigned int g2_fg_addr;	/* 0x021c G2 FG Start Address */

	unsigned int g2_bg_addr;	/* 0x0220 G2 BG Start Address */
	unsigned int g2_fb_sel;		/* 0x0224 G2 Framebuffer Select */
	unsigned int reserved6[2];	/* 0x0228 - 0x022c Reserved */

	unsigned int g1_x_start;	/* 0x0230 G1 X-COOR Start Point */
	unsigned int g1_x_end;		/* 0x0234 G1 X-COOR End Point */
	unsigned int g1_y_start;	/* 0x0238 G1 Y-COOR Start Point */
	unsigned int g1_y_end;		/* 0x023c G1 Y-COOR End Point */

	unsigned int g2_x_start;	/* 0x0240 G2 X-COOR Start Point */
	unsigned int g2_x_end;		/* 0x0244 G2 X-COOR End Point */
	unsigned int g2_y_start;	/* 0x0248 G2 Y-COOR Start Point */
	unsigned int g2_y_end;		/* 0x024c G2 Y-COOR End Point */

	unsigned int disp_x_end;	/* 0x0250 GE Display X End Point */
	unsigned int disp_y_end;	/* 0x0254 GE Display Y End Point */
	unsigned int ge_amx_cb;		/* 0x0258 GE AMX color bar */
	unsigned int g1_yuv_mode_en;	/* 0x025c G1 YUV Mode Enable */

	unsigned int g2_yuv_mode_en;	/* 0x0260 G2 YUV Mode Enable */
	unsigned int g1_yuv_fmt_sel;	/* 0x0264 G1 YUV Format Select */
	unsigned int g1_yuv_outp_sel;	/* 0x0268 G1 YUV Output Select */
	unsigned int g2_yuv_fmt_sel;	/* 0x026c G2 YUV Format Select */

	unsigned int g2_yuv_outp_sel;	/* 0x0270 G2 YUV Output Select */
	unsigned int ge_amx_csc_cfg;	/* 0x0274 GE AMX CSC Config */
	unsigned int ge_amx_csc_mode;	/* 0x0278 GE AMX CSC Mode */
	unsigned int ge_amx_y_sub_16_en;/* 0x027c GE AMX Y Sub 16 Enable */

	unsigned int g1_yuv_addr;	/* 0x0280 G1 YUV Address */
	unsigned int g2_yuv_addr;	/* 0x0284 G2 YUV Address */
	unsigned int reserved8[2];	/* 0x0288 - 0x028c Reserved */

	unsigned int reserved9[2];	/* 0x0290 - 0x0294 Reserved */
	unsigned int g1_ck_en;		/* 0x0298 G1 Color Key Enable */
	unsigned int g2_ck_en;		/* 0x029c G2 Color Key Enable */

	unsigned int g1_c_key;		/* 0x02a0 G1 Color Key */
	unsigned int g2_c_key;		/* 0x02a4 G2 Color Key */
	unsigned int g1_amx_en;		/* 0x02a8 G1 Alpha Mixing Enable */
	unsigned int g2_amx_en;		/* 0x02ac G2 Alpha Mixing Enable */

	unsigned int ge_ck2_apa;	/* 0x02b0 */
	unsigned int ge_amx_ctl;	/* 0x02b4 GE Alpha Mixing Control */
	unsigned int ge_ck_apa;		/* 0x02b8 GE Color Key alpha */
	unsigned int ge_fix_apa;	/* 0x02bc GE Fix Alpha */

	unsigned int g1_amx_hm;		/* 0x02c0 G1 AMX Hi Color Mode */
	unsigned int g2_amx_hm;		/* 0x02c4 G2 AMX Hi Color Mode */
	unsigned int ge_nh_data;	/* 0x02c8 G1/G2 No Hit Data Output */
	unsigned int ge_vsync_sts;	/* 0x02cc GE Vsync Status (New!) */

	unsigned int ge_reg_upd;	/* 0x02d0 GE Register Updata */
	unsigned int ge_reg_sel;	/* 0x02d4 GE Register Read Select */
	unsigned int ge_amx2_ctl;	/* 0x02d8 GE AMX Output Control */
	unsigned int ge_fix2_apa;	/* 0x02dc GE Fix Output Alpha */

	unsigned int g1_h_scale;	/* 0x02e0 G1 H Scaling Enable */
	unsigned int g2_h_scale;	/* 0x02e4 G2 H Scaling Enable */
	unsigned int g1_fbw;		/* 0x02e8 G1 Frame Buffer Width */
	unsigned int g1_vcrop;		/* 0x02ec G1 Vertical Cropping */

	unsigned int g1_hcrop;		/* 0x02f0 G1 Horizontal Cropping */
	unsigned int g2_fbw;		/* 0x02f4 G2 Frame Buffer Width */
	unsigned int g2_vcrop;		/* 0x02f8 G2 Vertical Cropping */
	unsigned int g2_hcrop;		/* 0x02fc G2 Horizontal Cropping */
};

struct ge_regs_3481 {

	/* Base1 address: 0xd8050400 */

	unsigned int ge_command;	/* 0x0000 GE Command */
	unsigned int _0004;		/* 0x0004 */
	unsigned int _0008;		/* 0x0008 */
	unsigned int pat_tran_en;	/* 0x000c GE Pattern Transp. Enable */

	unsigned int font_tran_en;	/* 0x0010 GE Font Transparency Enable */
	unsigned int rop_code;		/* 0x0014 GE ROP Code */
	unsigned int ge_fire;		/* 0x0018 GE Fire Code */
	unsigned int rop_bg_code;	/* 0x001c */

	unsigned int src_baddr;		/* 0x0020 GE Source Base Address */
	unsigned int src_disp_w;	/* 0x0024 GE Source Display width */
	unsigned int src_disp_h;	/* 0x0028 GE Source DIsplay height */
	unsigned int src_x_start;	/* 0x002c GE Source X start point */

	unsigned int src_y_start;	/* 0x0030 GE Source Y start point */
	unsigned int src_width;		/* 0x0034 GE Source Width */
	unsigned int src_height;	/* 0x0038 GE Source Height */
	unsigned int des_baddr;		/* 0x003c GE Dest Base Address */

	unsigned int des_disp_w;	/* 0x0040 GE Dest Display width */
	unsigned int des_disp_h;	/* 0x0044 GE Dest DIsplay height */
	unsigned int des_x_start;	/* 0x0048 GE Dest X start point */
	unsigned int des_y_start;	/* 0x004c GE Dest Y start point */

	unsigned int des_width;		/* 0x0050 GE Dest Width */
	unsigned int des_height;	/* 0x0054 GE Dest Height */
	unsigned int font0_buf;		/* 0x0058 GE FONT Color 0 Buffer */
	unsigned int font1_buf;		/* 0x005c GE FONT Color 1 Buffer */

	unsigned int font2_buf;		/* 0x0060 GE FONT Color 2 Buffer*/
	unsigned int font3_buf;		/* 0x0064 GE FONT Color 3 Buffer*/
	unsigned int pat0_buf;		/* 0x0068 GE Pattern 0 Buffer */
	unsigned int pat1_buf;		/* 0x006c GE Pattern 1 Buffer */

	unsigned int pat2_buf;		/* 0x0070 GE Pattern 2 Buffer */
	unsigned int pat3_buf;		/* 0x0074 GE Pattern 3 Buffer */
	unsigned int pat4_buf;		/* 0x0078 GE Pattern 4 Buffer */
	unsigned int pat5_buf;		/* 0x007c GE Pattern 5 Buffer */

	unsigned int pat6_buf;		/* 0x0080 GE Pattern 6 Buffer */
	unsigned int pat7_buf;		/* 0x0084 GE Pattern 7 Buffer */
	unsigned int pat0_color;	/* 0x0088 GE Pattern 0 Color */
	unsigned int pat1_color;	/* 0x008c GE Pattern 1 Color */

	unsigned int pat2_color;	/* 0x0090 GE Pattern 2 Color */
	unsigned int pat3_color;	/* 0x0094 GE Pattern 3 Color */
	unsigned int pat4_color;	/* 0x0098 GE Pattern 4 Color */
	unsigned int pat5_color;	/* 0x009c GE Pattern 5 Color */

	unsigned int pat6_color;	/* 0x00a0 GE Pattern 6 Color */
	unsigned int pat7_color;	/* 0x00a4 GE Pattern 7 Color */
	unsigned int pat8_color;	/* 0x00a8 GE Pattern 8 Color */
	unsigned int pat9_color;	/* 0x00ac GE Pattern 9 Color */

	unsigned int pat10_color;	/* 0x00b0 GE Pattern 10 Color */
	unsigned int pat11_color;	/* 0x00b4 GE Pattern 11 Color */
	unsigned int pat12_color;	/* 0x00b8 GE Pattern 12 Color */
	unsigned int pat13_color;	/* 0x00bc GE Pattern 13 Color */

	unsigned int pat14_color;	/* 0x00c0 GE Pattern 14 Color */
	unsigned int pat15_color;	/* 0x00c4 GE Pattern 15 Color */
	unsigned int ck_sel;		/* 0x00c8 Color Key Select */
	unsigned int src_ck;		/* 0x00cc GE Source Colorkey */

	unsigned int des_ck;		/* 0x00d0 GE Destination Colorkey */
	unsigned int alpha_sel;		/* 0x00d4 GE Alpha Select */
	unsigned int bitblt_alpha;	/* 0x00d8 */
	unsigned int _00dc;		/* 0x00dc */

	unsigned int rotate_mode;	/* 0x00e0 GE Rotate Mode */
	unsigned int mirror_mode;	/* 0x00e4 GE Mirror Mode */
	unsigned int ge_delay;		/* 0x00e8 GE Start Cycle Delay */
	unsigned int ge_eng_en;		/* 0x00ec GE Engine Enable */

	unsigned int ge_int_en;		/* 0x00f0 GE Intr. Enable signal */
	unsigned int ge_int_flag;	/* 0x00f4 GE Interrupt Flag */
	unsigned int ge_status;		/* 0x00f8 GE AMX Status */
	unsigned int ge_swid;		/* 0x00fc GE Software Identify */

	/* Base2 address: 0xd8050500 */

	unsigned int ln_x_start;	/* 0x0100 */
	unsigned int ln_x_end;		/* 0x0104 */
	unsigned int ln_y_start;	/* 0x0108 */
	unsigned int _010c;		/* 0x010c */

	unsigned int ln_y_end;		/* 0x0110 */
	unsigned int ln_tck;		/* 0x0114 */
	unsigned int amx_csc_bypass;	/* 0x0118 GE AMX CSC Bypass */
	unsigned int c1_coef;		/* 0x011c */

	unsigned int ln_stl_tb;		/* 0x0120 */
	unsigned int ln_stl_rtn;	/* 0x0124 */
	unsigned int ln_stl_data;	/* 0x0128 */
	unsigned int ln_stl_apa;	/* 0x012c */

	unsigned int bc_p1x;		/* 0x0130 */
	unsigned int bc_p1y;		/* 0x0134 */
	unsigned int bc_p2x;		/* 0x0138 */
	unsigned int bc_p2y;		/* 0x013c */

	unsigned int bc_p3x;		/* 0x0140 */
	unsigned int bc_p3y;		/* 0x0144 */
	unsigned int bc_color;		/* 0x0148 */
	unsigned int bc_alpha;		/* 0x014c */

	unsigned int bc_delta_t;	/* 0x0150 */
	unsigned int bc_l_stl;		/* 0x0154 */
	unsigned int bc_l_stl_rtn;	/* 0x0158 */
	unsigned int c2_coef;		/* 0x015c */

	unsigned int c3_coef;		/* 0x0160 */
	unsigned int c4_coef;		/* 0x0164 */
	unsigned int c5_coef;		/* 0x0168 */
	unsigned int c6_coef;		/* 0x016c */

	unsigned int c7_coef;		/* 0x0170 */
	unsigned int c8_coef;		/* 0x0174 */
	unsigned int _0178;		/* 0x0178 */
	unsigned int _017c;		/* 0x017c */

	unsigned int vq_en;		/* 0x0180 VQ Enable */
	unsigned int vq_size;		/* 0x0184 VQ Buffer Size */
	unsigned int vq_udptr;		/* 0x0188 VQ Pointer Update */
	unsigned int vq_baseaddr;	/* 0x018c VQ Buffer Base Address */

	unsigned int vq_wrsize;		/* 0x0190 VQ Free Buffer Space */
	unsigned int vq_staddrw;	/* 0x0194 DRAM Access Address */
	unsigned int vq_thr;		/* 0x0198 VQ Lower Intr. Threshold */
	unsigned int _019c;		/* 0x019c */

	unsigned int rop4_en;		/* 0x01a0 */
	unsigned int alpha_plane_en;	/* 0x01a4 */
	unsigned int mask_baddr;	/* 0x01a8 */
	unsigned int mask_disp_w;	/* 0x01ac */

	unsigned int mask_disp_h;	/* 0x01b0 */
	unsigned int mask_x_start;	/* 0x01b4 */
	unsigned int mask_y_start;	/* 0x01b8 */
	unsigned int mask_width;	/* 0x01bc */

	unsigned int mask_height;	/* 0x01c0 */
	unsigned int dw_mask_baddr;	/* 0x01c4 */
	unsigned int alpha_plane_wbe;	/* 0x01c8 */
	unsigned int _01cc;		/* 0x01cc */

	unsigned int adap_blend_en;	/* 0x01d0 (New!) */
	unsigned int src_alpha_sel;	/* 0x01d4 (New!) */
	unsigned int src_blend_apa;	/* 0x01d8 (New!) */
	unsigned int des_alpha_sel;	/* 0x01dc (New!) */

	unsigned int des_blend_apa;	/* 0x01e0 (New!) */
	unsigned int adap_clamp_en;	/* 0x01e4 (New!) */
	unsigned int yuy2_c_blend_sel;	/* 0x01e8 YUY2 C Blending Select */
	unsigned int _01ec;		/* 0x01ec */

	unsigned int c9_coef;		/* 0x01f0 */
	unsigned int coef_i;		/* 0x01f4 */
	unsigned int coef_j;		/* 0x01f8 */
	unsigned int coef_k;		/* 0x01fc */

	/* Base3 address: 0xd8050600 */

	unsigned int g1_cd;		/* 0x0200 G1 Color Depth */
	unsigned int g2_cd;		/* 0x0204 G2 Color Depth */
	unsigned int _0208;		/* 0x0208 */
	unsigned int _020c;		/* 0x020c */

	unsigned int g1_fg_addr;	/* 0x0210 G1 FG Start Address */
	unsigned int g1_bg_addr;	/* 0x0214 G1 BG Start Address */
	unsigned int g1_fb_sel;		/* 0x0218 G1 Framebuffer Select */
	unsigned int g2_fg_addr;	/* 0x021c G2 FG Start Address */

	unsigned int g2_bg_addr;	/* 0x0220 G2 BG Start Address */
	unsigned int g2_fb_sel;		/* 0x0224 G2 Framebuffer Select */
	unsigned int _0228;		/* 0x0228 */
	unsigned int _022c;		/* 0x022c */

	unsigned int g1_x_start;	/* 0x0230 G1 X-COOR Start Point */
	unsigned int g1_x_end;		/* 0x0234 G1 X-COOR End Point */
	unsigned int g1_y_start;	/* 0x0238 G1 Y-COOR Start Point */
	unsigned int g1_y_end;		/* 0x023c G1 Y-COOR End Point */

	unsigned int g2_x_start;	/* 0x0240 G2 X-COOR Start Point */
	unsigned int g2_x_end;		/* 0x0244 G2 X-COOR End Point */
	unsigned int g2_y_start;	/* 0x0248 G2 Y-COOR Start Point */
	unsigned int g2_y_end;		/* 0x024c G2 Y-COOR End Point */

	unsigned int disp_x_end;	/* 0x0250 GE Display X End Point */
	unsigned int disp_y_end;	/* 0x0254 GE Display Y End Point */
	unsigned int ge_amx_cb;		/* 0x0258 GE AMX color bar */
	unsigned int g1_yuv_mode_en;	/* 0x025c G1 YUV Mode Enable */

	unsigned int g2_yuv_mode_en;	/* 0x0260 G2 YUV Mode Enable */
	unsigned int g1_yuv_fmt_sel;	/* 0x0264 G1 YUV Format Select */
	unsigned int g1_yuv_outp_sel;	/* 0x0268 G1 YUV Output Select */
	unsigned int g2_yuv_fmt_sel;	/* 0x026c G2 YUV Format Select */

	unsigned int g2_yuv_outp_sel;	/* 0x0270 G2 YUV Output Select */
	unsigned int ge_amx_csc_cfg;	/* 0x0274 GE AMX CSC Config */
	unsigned int ge_amx_csc_mode;	/* 0x0278 GE AMX CSC Mode */
	unsigned int ge_amx_y_sub_16_en;/* 0x027c GE AMX Y Sub 16 Enable */

	unsigned int g1_yuv_addr;	/* 0x0280 G1 YUV Address */
	unsigned int g2_yuv_addr;	/* 0x0284 G2 YUV Address */
	unsigned int _0288;		/* 0x0288 */
	unsigned int _028c;		/* 0x028c */

	unsigned int _0290;		/* 0x0290 */
	unsigned int _0294;		/* 0x0294 */
	unsigned int g1_ck_en;		/* 0x0298 G1 Color Key Enable */
	unsigned int g2_ck_en;		/* 0x029c G2 Color Key Enable */

	unsigned int g1_c_key;		/* 0x02a0 G1 Color Key */
	unsigned int g2_c_key;		/* 0x02a4 G2 Color Key */
	unsigned int g1_amx_en;		/* 0x02a8 G1 Alpha Mixing Enable */
	unsigned int g2_amx_en;		/* 0x02ac G2 Alpha Mixing Enable */

	unsigned int ge_ck2_apa;	/* 0x02b0 */
	unsigned int ge_amx_ctl;	/* 0x02b4 GE Alpha Mixing Control */
	unsigned int ge_ck_apa;		/* 0x02b8 GE Color Key alpha */
	unsigned int ge_fix_apa;	/* 0x02bc GE Fix Alpha */

	unsigned int g1_amx_hm;		/* 0x02c0 G1 AMX Hi Color Mode */
	unsigned int g2_amx_hm;		/* 0x02c4 G2 AMX Hi Color Mode */
	unsigned int ge_nh_data;	/* 0x02c8 G1/G2 No Hit Data Output */
	unsigned int ge_vsync_sts;	/* 0x02cc GE Vsync Status (New!) */

	unsigned int ge_reg_upd;	/* 0x02d0 GE Register Updata */
	unsigned int ge_reg_sel;	/* 0x02d4 GE Register Read Select */
	unsigned int ge_amx2_ctl;	/* 0x02d8 GE AMX Output Control */
	unsigned int ge_fix2_apa;	/* 0x02dc GE Fix Output Alpha */

	unsigned int g1_h_scale;	/* 0x02e0 G1 H Scaling Enable */
	unsigned int g2_h_scale;	/* 0x02e4 G2 H Scaling Enable */
	unsigned int g1_fbw;		/* 0x02e8 G1 Frame Buffer Width */
	unsigned int g1_vcrop;		/* 0x02ec G1 Vertical Cropping */

	unsigned int g1_hcrop;		/* 0x02f0 G1 Horizontal Cropping */
	unsigned int g2_fbw;		/* 0x02f4 G2 Frame Buffer Width */
	unsigned int g2_vcrop;		/* 0x02f8 G2 Vertical Cropping */
	unsigned int g2_hcrop;		/* 0x02fc G2 Horizontal Cropping */

	/* Reserved address: 0xd8050700 - 0xd80512fc */

	unsigned int _0300[768];	/* 0x0300 - 0xefc */

	/* Base4 address: 0xd8051300 */

	unsigned int alpha_bitblt_mode;	/* 0x0f00 */
	unsigned int src_input_sel;	/* 0x0f04 */
	unsigned int period_stop;	/* 0x0f08 */
	unsigned int _0f0c;		/* 0x0f0c */

	unsigned int src_c_exp_bypass;		/* 0x0f10 */
	unsigned int src_c_exp_rgb_mode;	/* 0x0f14 */
	unsigned int src_c_exp_cplt_mode;	/* 0x0f18 */
	unsigned int src_csc_en;		/* 0x0f1c */

	unsigned int src_csc_mode;	/* 0x0f20 */
	unsigned int src_y_sub_16_en;	/* 0x0f24 */
	unsigned int src_c1_coef;	/* 0x0f28 */
	unsigned int src_c2_coef;	/* 0x0f2c */

	unsigned int src_c3_coef;	/* 0x0f30 */
	unsigned int src_c4_coef;	/* 0x0f34 */
	unsigned int src_c5_coef;	/* 0x0f38 */
	unsigned int src_c6_coef;	/* 0x0f3c */

	unsigned int src_c7_coef;	/* 0x0f40 */
	unsigned int src_c8_coef;	/* 0x0f44 */
	unsigned int src_c9_coef;	/* 0x0f48 */
	unsigned int src_coef_i;	/* 0x0f4c */

	unsigned int src_coef_j;	/* 0x0f50 */
	unsigned int src_coef_k;	/* 0x0f54 */
	unsigned int src_igs_mode;	/* 0x0f58 */
	unsigned int _0f5c;		/* 0x0f5c */

	unsigned int des_c_exp_bypass;		/* 0x0f60 */
	unsigned int des_c_exp_rgb_mode;	/* 0x0f64 */
	unsigned int des_c_exp_cplt_mode;	/* 0x0f68 */
	unsigned int des_csc_en;		/* 0x0f6c */

	unsigned int des_csc_mode;	/* 0x0f70 */
	unsigned int des_y_sub_16_en;	/* 0x0f74 */
	unsigned int des_c1_coef;	/* 0x0f78 */
	unsigned int des_c2_coef;	/* 0x0f7c */

	unsigned int des_c3_coef;	/* 0x0f80 */
	unsigned int des_c4_coef;	/* 0x0f84 */
	unsigned int des_c5_coef;	/* 0x0f88 */
	unsigned int des_c6_coef;	/* 0x0f8c */

	unsigned int des_c7_coef;	/* 0x0f90 */
	unsigned int des_c8_coef;	/* 0x0f94 */
	unsigned int des_c9_coef;	/* 0x0f98 */
	unsigned int des_coef_i;	/* 0x0f9c */

	unsigned int des_coef_j;	/* 0x0fa0 */
	unsigned int des_coef_k;	/* 0x0fa4 */
	unsigned int des_igs_mode;	/* 0x0fa8 */
	unsigned int vpu_rcmd;		/* 0x0fac */

	unsigned int vpu_field_mode;	/* 0x0fb0 */
	unsigned int vpu_field_sel;	/* 0x0fb4 */
	unsigned int vpu_vpu_pvbi;	/* 0x0fb8 */
	unsigned int time_out_sel;	/* 0x0fbc */

	unsigned int time_out;		/* 0x0fc0 */
	unsigned int src_rgb32_fmt;	/* 0x0fc4 */
	unsigned int src_yuv_en;	/* 0x0fc8 */
	unsigned int src_fmt444;	/* 0x0fcc */

	unsigned int src_vfmt;		/* 0x0fd0 */
	unsigned int src_src_fmt;	/* 0x0fd4 */
	unsigned int src_src_out;	/* 0x0fd8 */
	unsigned int src_field_mode;	/* 0x0fdc */

	unsigned int src_field_sel;	/* 0x0fe0 */
	unsigned int src_c_baddr;	/* 0x0fe4 */
	unsigned int src_cb;		/* 0x0fe8 */
	unsigned int src_color_depth;	/* 0x0fec */

	unsigned int src_hm_sel;	/* 0x0ff0 */
	unsigned int src_req_sel;	/* 0x0ff4 */
	unsigned int src_y_req_num;	/* 0x0ff8 */
	unsigned int src_c_req_num;	/* 0x0ffc */

	/* Base5 address: 0xd8051400 */

	unsigned int des_yuv_en;	/* 0x1000 */
	unsigned int des_fmt444;	/* 0x1004 */
	unsigned int des_vfmt;		/* 0x1008 */
	unsigned int des_src_fmt;	/* 0x100c */

	unsigned int des_src_out;	/* 0x1010 */
	unsigned int des_field_mode;	/* 0x1014 */
	unsigned int des_field_sel;	/* 0x1018 */
	unsigned int des_c_baddr;	/* 0x101c */

	unsigned int des_cb;		/* 0x1020 */
	unsigned int des_color_depth;	/* 0x1024 */
	unsigned int des_hm_sel;	/* 0x1028 */
	unsigned int des_req_sel;	/* 0x102c */

	unsigned int des_y_req_num;	/* 0x1030 */
	unsigned int des_c_req_num;	/* 0x1034 */
	unsigned int dw_color_depth;	/* 0x1038 */
	unsigned int dw_hm_sel;		/* 0x103c */

	unsigned int dw_baddr;		/* 0x1040 */
	unsigned int dw_disp_w;		/* 0x1044 */
	unsigned int dw_disp_h;		/* 0x1048 */
	unsigned int dw_x_start;	/* 0x104c */

	unsigned int dw_y_start;	/* 0x1050 */
	unsigned int dw_width;		/* 0x1054 */
	unsigned int dw_height;		/* 0x1058 */
	unsigned int dw_yuv_en;		/* 0x105c */

	unsigned int dw_fmt444;		/* 0x1060 */
	unsigned int dw_vfmt;		/* 0x1064 */
	unsigned int dw_c_baddr;	/* 0x1068 */
	unsigned int _106c;		/* 0x106c */

	unsigned int govr_src_en;	/* 0x1070 */
	unsigned int govr_des_en;	/* 0x1074 */
	unsigned int govr_src_x_start;	/* 0x1078 */
	unsigned int govr_src_y_start;	/* 0x107c */

	unsigned int govr_des_x_start;		/* 0x1080 */
	unsigned int govr_des_y_start;		/* 0x1084 */
	unsigned int govr_no_hit_data;		/* 0x1088 */
	unsigned int govr_src_blend_data;	/* 0x108c */

	unsigned int govr_des_blend_data;	/* 0x1090 */
	unsigned int src_fix_00_apa;		/* 0x1094 */
	unsigned int src_fix_01_apa;		/* 0x1098 */
	unsigned int src_fix_10_apa;		/* 0x109c */

	unsigned int src_fix_11_apa;		/* 0x10a0 */
	unsigned int src_govr_hit_01_sel;	/* 0x10a4 */
	unsigned int src_govr_hit_10_sel;	/* 0x10a8 */
	unsigned int src_govr_hit_11_sel;	/* 0x10ac */

	unsigned int des_fix_00_apa;	/* 0x10b0 */
	unsigned int des_fix_01_apa;	/* 0x10b4 */
	unsigned int des_fix_10_apa;	/* 0x10b8 */
	unsigned int des_fix_11_apa;	/* 0x10bc */

	unsigned int des_govr_hit_01_sel;	/* 0x10c0 */
	unsigned int des_govr_hit_10_sel;	/* 0x10c4 */
	unsigned int des_govr_hit_11_sel;	/* 0x10c8 */
	unsigned int src_ckey_en;		/* 0x10cc */

	unsigned int des_ckey_en;	/* 0x10d0 */
	unsigned int src_ckey_ctrl;	/* 0x10d4 */
	unsigned int des_ckey_ctrl;	/* 0x10d8 */
	unsigned int src_ckey;		/* 0x10dc */

	unsigned int des_ckey;		/* 0x10e0 */
	unsigned int dw_watch_dog_en;	/* 0x10e4 */
	unsigned int dw_watch_dog;	/* 0x10e8 */
	unsigned int mask_bypass;	/* 0x10ec */

	unsigned int _10f0;		/* 0x10f0 */
	unsigned int _10f4;		/* 0x10f4 */
	unsigned int _10f8;		/* 0x10f8 */
	unsigned int no_hit_alpha;	/* 0x10fc */

	/* Base6 address: 0xd8051500 */

	unsigned int src_output_alpha_01;	/* 0x1100 */
	unsigned int src_output_alpha_0101;	/* 0x1104 */
	unsigned int src_output_alpha_10;	/* 0x1108 */
	unsigned int src_output_alpha_1010;	/* 0x110c */

	unsigned int src_output_alpha_1100;	/* 0x1110 */
	unsigned int src_output_alpha_1101;	/* 0x1114 */
	unsigned int src_output_alpha_1110;	/* 0x1118 */
	unsigned int src_output_alpha_1111;	/* 0x111c */

	unsigned int src_output_alpha_01_sel;	/* 0x1120 */
	unsigned int src_output_alpha_0101_sel;	/* 0x1124 */
	unsigned int src_output_alpha_10_sel;	/* 0x1128 */
	unsigned int src_output_alpha_1010_sel;	/* 0x112c */

	unsigned int src_output_alpha_1100_sel;	/* 0x1130 */
	unsigned int src_output_alpha_1101_sel;	/* 0x1134 */
	unsigned int src_output_alpha_1110_sel;	/* 0x1138 */
	unsigned int src_output_alpha_1111_sel;	/* 0x113c */

	unsigned int des_output_alpha_01;	/* 0x1140 */
	unsigned int des_output_alpha_0101;	/* 0x1144 */
	unsigned int des_output_alpha_10;	/* 0x1148 */
	unsigned int des_output_alpha_1010;	/* 0x114c */

	unsigned int des_output_alpha_1100;	/* 0x1150 */
	unsigned int des_output_alpha_1101;	/* 0x1154 */
	unsigned int des_output_alpha_1110;	/* 0x1158 */
	unsigned int des_output_alpha_1111;	/* 0x115c */

	unsigned int des_output_alpha_01_sel;	/* 0x1160 */
	unsigned int des_output_alpha_0101_sel;	/* 0x1164 */
	unsigned int des_output_alpha_10_sel;	/* 0x1168 */
	unsigned int des_output_alpha_1010_sel;	/* 0x116c */

	unsigned int des_output_alpha_1100_sel;	/* 0x1170 */
	unsigned int des_output_alpha_1101_sel;	/* 0x1174 */
	unsigned int des_output_alpha_1110_sel;	/* 0x1178 */
	unsigned int des_output_alpha_1111_sel;	/* 0x117c */

	unsigned int src_select_alpha_01;	/* 0x1180 */
	unsigned int src_select_alpha_0101;	/* 0x1184 */
	unsigned int src_select_alpha_10;	/* 0x1188 */
	unsigned int src_select_alpha_1010;	/* 0x118c */

	unsigned int src_select_alpha_1100;	/* 0x1190 */
	unsigned int src_select_alpha_1101;	/* 0x1194 */
	unsigned int src_select_alpha_1110;	/* 0x1198 */
	unsigned int src_select_alpha_1111;	/* 0x119c */

	unsigned int src_select_alpha_01_sel;	/* 0x11a0 */
	unsigned int src_select_alpha_0101_sel;	/* 0x11a4 */
	unsigned int src_select_alpha_10_sel;	/* 0x11a8 */
	unsigned int src_select_alpha_1010_sel;	/* 0x11ac */

	unsigned int src_select_alpha_1100_sel;	/* 0x11b0 */
	unsigned int src_select_alpha_1101_sel;	/* 0x11b4 */
	unsigned int src_select_alpha_1110_sel;	/* 0x11b8 */
	unsigned int src_select_alpha_1111_sel;	/* 0x11bc */

	unsigned int des_select_alpha_01;	/* 0x11c0 */
	unsigned int des_select_alpha_0101;	/* 0x11c4 */
	unsigned int des_select_alpha_10;	/* 0x11c8 */
	unsigned int des_select_alpha_1010;	/* 0x11cc */

	unsigned int des_select_alpha_1100;	/* 0x11d0 */
	unsigned int des_select_alpha_1101;	/* 0x11d4 */
	unsigned int des_select_alpha_1110;	/* 0x11d8 */
	unsigned int des_select_alpha_1111;	/* 0x11dc */

	unsigned int des_select_alpha_01_sel;	/* 0x11e0 */
	unsigned int des_select_alpha_0101_sel;	/* 0x11e4 */
	unsigned int des_select_alpha_10_sel;	/* 0x11e8 */
	unsigned int des_select_alpha_1010_sel;	/* 0x11ec */

	unsigned int des_select_alpha_1100_sel;	/* 0x11f0 */
	unsigned int des_select_alpha_1101_sel;	/* 0x11f4 */
	unsigned int des_select_alpha_1110_sel;	/* 0x11f8 */
	unsigned int des_select_alpha_1111_sel;	/* 0x11fc */

	/* Base7 address: 0xd8051600 */

	unsigned int _1200;	/* 0x1200 */
	unsigned int _1204;	/* 0x1204 */
	unsigned int _1208;	/* 0x1208 */
	unsigned int _120c;	/* 0x120c */

	unsigned int _1210;	/* 0x1210 */
	unsigned int _1214;	/* 0x1214 */
	unsigned int _1218;	/* 0x1218 */
	unsigned int _121c;	/* 0x121c */

	unsigned int _1220;	/* 0x1220 */
	unsigned int _1224;	/* 0x1224 */
	unsigned int _1228;	/* 0x1228 */
	unsigned int _122c;	/* 0x122c */

	unsigned int _1230;	/* 0x1230 */
	unsigned int _1234;	/* 0x1234 */
	unsigned int _1238;	/* 0x1238 */
	unsigned int _123c;	/* 0x123c */

	unsigned int _1240;	/* 0x1240 */
	unsigned int _1244;	/* 0x1244 */
	unsigned int _1248;	/* 0x1248 */
	unsigned int _124c;	/* 0x124c */

	unsigned int _1250;	/* 0x1250 */
	unsigned int _1254;	/* 0x1254 */
	unsigned int _1258;	/* 0x1258 */
	unsigned int _125c;	/* 0x125c */

	unsigned int _1260;	/* 0x1260 */
	unsigned int _1264;	/* 0x1264 */
	unsigned int _1268;	/* 0x1268 */
	unsigned int _126c;	/* 0x126c */

	unsigned int _1270;	/* 0x1270 */
	unsigned int _1274;	/* 0x1274 */
	unsigned int _1278;	/* 0x1278 */
	unsigned int _127c;	/* 0x127c */

	unsigned int _1280;	/* 0x1280 */
	unsigned int _1284;	/* 0x1284 */
	unsigned int _1288;	/* 0x1288 */
	unsigned int _128c;	/* 0x128c */

	unsigned int _1290;	/* 0x1290 */
	unsigned int _1294;	/* 0x1294 */
	unsigned int _1298;	/* 0x1298 */
	unsigned int _129c;	/* 0x129c */

	unsigned int _12a0;	/* 0x12a0 */
	unsigned int _12a4;	/* 0x12a4 */
	unsigned int _12a8;	/* 0x12a8 */
	unsigned int _12ac;	/* 0x12ac */

	unsigned int _12b0;	/* 0x12b0 */
	unsigned int _12b4;	/* 0x12b4 */
	unsigned int _12b8;	/* 0x12b8 */
	unsigned int _12bc;	/* 0x12bc */

	unsigned int _12c0;	/* 0x12c0 */
	unsigned int _12c4;	/* 0x12c4 */
	unsigned int _12c8;	/* 0x12c8 */
	unsigned int _12cc;	/* 0x12cc */

	unsigned int _12d0;	/* 0x12d0 */
	unsigned int _12d4;	/* 0x12d4 */
	unsigned int _12d8;	/* 0x12d8 */
	unsigned int _12dc;	/* 0x12dc */

	unsigned int _12e0;	/* 0x12e0 */
	unsigned int _12e4;	/* 0x12e4 */
	unsigned int _12e8;	/* 0x12e8 */
	unsigned int _12ec;	/* 0x12ec */

	unsigned int _12f0;	/* 0x12f0 */
	unsigned int _12f4;	/* 0x12f4 */
	unsigned int _12f8;	/* 0x12f8 */
	unsigned int _12fc;	/* 0x12fc */
};

/* register alias */
#define ge_int_stat pat15_color
#define ge_exa_ctrl pat14_color

#endif /* GE_REGS_DEF_H */

/* import ./include/ge_regs.h */

#ifndef GE_REGS_H
#define GE_REGS_H 1

#if !defined(__KERNEL__) && !defined(__POST__)
#ifndef __LINUX__
#define __LINUX__
#endif /* __LINUX__ */
#endif

#ifdef __POST__
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#undef __KERNEL__
#undef __LINUX__
#endif

#ifdef __KERNEL__
#include <linux/uaccess.h>
#include <asm/page.h>
#include <linux/semaphore.h>
#include <linux/ioctl.h>
#include <linux/mm.h>
#include <linux/fb.h>
#include <linux/errno.h>
#include <linux/kernel.h>
#include <linux/dma-mapping.h>
#include <mach/hardware.h>
#ifndef LINUX_VERSION_CODE
#include <linux/version.h>
#endif /* LINUX_VERSION_CODE */
#undef __LINUX__
#endif

#ifdef __LINUX__
#include <linux/fb.h>
#include <linux/errno.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#endif

/* #include "gmp.h" */
/* #include "ge_regs_def.h" */

#ifdef __LINUX__
/* #include <ge_plugin.h> */
#endif

#if defined(__KERNEL__)
#define SCC_CHIP_ID	(*(unsigned int *)SYSTEM_CFG_CTRL_BASE_ADDR)
#elif defined(__POST__)
#define SCC_CHIP_ID	(*(unsigned int *)0xd8120000)
#else
#define SCC_CHIP_ID	(0)
#endif

#ifdef __KERNEL__
#define GE_MMIO_START	(0xd8050000 + WMT_MMAP_OFFSET)
#define GE_MMIO_OFFSET	0x400
#else
#define GE_MMIO_START	(0xd8050000)
#define GE_MMIO_OFFSET	0x400
#endif

#ifndef BIT0
#define BIT0	0x00000001
#define BIT1	0x00000002
#define BIT2	0x00000004
#define BIT3	0x00000008
#define BIT4	0x00000010
#define BIT5	0x00000020
#define BIT6	0x00000040
#define BIT7	0x00000080
#define BIT8	0x00000100
#define BIT9	0x00000200
#define BIT10	0x00000400
#define BIT11	0x00000800
#define BIT12	0x00001000
#define BIT13	0x00002000
#define BIT14	0x00004000
#define BIT15	0x00008000
#define BIT16	0x00010000
#define BIT17	0x00020000
#define BIT18	0x00040000
#define BIT19	0x00080000
#define BIT20	0x00100000
#define BIT21	0x00200000
#define BIT22	0x00400000
#define BIT23	0x00800000
#define BIT24	0x01000000
#define BIT25	0x02000000
#define BIT26	0x04000000
#define BIT27	0x08000000
#define BIT28	0x10000000
#define BIT29	0x20000000
#define BIT30	0x40000000
#define BIT31	0x80000000
#endif

#ifdef __POST__
#define EPERM            1      /* Operation not permitted */
#define EINTR            4      /* Interrupted system call */
#define EIO              5      /* I/O error */
#define EAGAIN          11      /* Try again */
#define ENOMEM          12      /* Out of memory */
#define EACCES          13      /* Permission denied */
#define EFAULT          14      /* Bad address */
#define EBUSY           16      /* Device or resource busy */
#define EINVAL          22      /* Invalid argument */
#endif

#ifndef REG_SET32
#define REG_SET32(addr, val)	(*(volatile unsigned int *)(addr)) = val
#define REG_GET32(addr)		(*(volatile unsigned int *)(addr))
#define REG_VAL32(addr)		(*(volatile unsigned int *)(addr))
#define REG_SET16(addr, val)	(*(volatile unsigned short *)(addr)) = val
#define REG_GET16(addr)		(*(volatile unsigned short *)(addr))
#define REG_VAL16(addr)		(*(volatile unsigned short *)(addr))
#define REG_SET8(addr, val)	(*(volatile unsigned char *)(addr)) = val
#define REG_GET8(addr)		(*(volatile unsigned char *)(addr))
#define REG_VAL8(addr)		(*(volatile unsigned char *)(addr))
#endif

#if __LINUX_ARM_ARCH__ >= 7
#define ge_mb() __asm__ __volatile__ ("dmb" : : : "memory")
#else
#define ge_mb() __asm__ __volatile__ ("" : : : "memory")
#endif

/* GL.h */

/* Pixel Formats
 *
 * RGB24 - RGB (24bpp), interleaved format, R-G-B order
 * BGR24 - RGB (24bpp), interleaved format, B-G-R order
 * YUV444P - YUV 4:4:4 (24bpp), basic planar format, Y-U-V (Y/Cb/Cr) order
 * YUV422P - YUV 4:2:2 (16bpp), basic planar format, Y-U-V (Y/Cb/Cr) order
 * YUV420P (aka "I420") - YUV 4:2:0 (12bpp), basic planar format, Y-U-V (Y/Cb/Cr) order
 * YVU420P (aka "YV12") - YUV 4:2:0 (12bpp), basic planar format, Y-V-U (Y/Cr/Cb) order
 * YUV422I (aka "YUY2") - YUV 4:2:2 (16bpp), interleaved format, Y-U-Y-V (Y/Cb/Y/Cr) order
 * YVU422I (aka "YVYU") - YUV 4:2:2 (16bpp), interleaved format, Y-V-Y-U (Y/Cr/Y/Cb) order
 * I  = interleaved
 * P  = planar
 * SP = semi planar
 */

/* invalid old pixel format */
/*
#define GSPF_FMT(cd, hm) (((cd) << 4) | (hm & 0xf))
#define GSPF_RGB32  GSPF_FMT(3, 0)
#define GSPF_ARGB   GSPF_FMT(3, 1)
#define GSPF_RGB24  GSPF_FMT(2, 0)
#define GSPF_RGB16  GSPF_FMT(1, 0)
#define GSPF_RGB555 GSPF_FMT(1, 1)
#define GSPF_RGB454 GSPF_FMT(1, 2)
#define GSPF_LUT8   GSPF_FMT(0, 0)
#define GSPF_RGB_MASK   0xff
#define GSPF_YUV_MASK	0xff00
*/

#define GSPF_XXX(fmt)             ((fmt >> 13) & 7)
#define GSPF_YUV(fmt)             ((fmt >> 10) & 7)
#define GSPF_PLANES(fmt)          (((fmt >> 8) & 3) + 1)
#define GSPF_VARIANT(fmt)         ((fmt >> 5) & 7)
#define GSPF_BPP(fmt)             ((fmt & 0x1f) + 1)

#define GSPF_BITS_PER_PIXEL(fmt)  GSPF_BPP(fmt)
#define GSPF_BYTES_PER_PIXEL(fmt) ((GSPF_BPP(fmt) + 4) >> 3)

/*
 * yuv: 0 = RGB, 1 = YUV411, 2 = YUV420, 3 = YUV422, 4 = YUV444, 5 = AYUV,
 *      7 = VPU
 */

#define GSPF_FMT(xxx, yuv, planes, variant, bpp) \
	((xxx & 7) << 13 | \
	(yuv & 7) << 10 | \
	((planes - 1) & 3) << 8 | \
	((variant & 7) << 5) | \
	((bpp - 1) & 0x1f))

#define GSPF_RGB32  GSPF_FMT(0, 0, 1, 0, 32)
#define GSPF_ARGB   GSPF_FMT(0, 0, 1, 1, 32)
#define GSPF_RGB24  GSPF_FMT(0, 0, 1, 0, 24)
#define GSPF_RGB16  GSPF_FMT(0, 0, 1, 0, 16)
#define GSPF_RGB555 GSPF_FMT(0, 0, 1, 1, 16)
#define GSPF_RGB454 GSPF_FMT(0, 0, 1, 2, 16)
#define GSPF_LUT8   GSPF_FMT(0, 0, 1, 0, 8)
#define GSPF_A1     GSPF_FMT(0, 0, 1, 0, 1)
#define GSPF_LUT2   GSPF_FMT(0, 0, 1, 0, 2)

#define GSPF_A8    GSPF_LUT8
#define GSPF_RAW8  GSPF_LUT8
#define GSPF_RAW16 GSPF_RGB16
#define GSPF_RAW24 GSPF_RGB24
#define GSPF_RAW32 GSPF_RGB32

/* 12 bit   YUV (8 bit Y plane followed by 8 bit quarter size U/V planes) */
#define GSPF_I420 GSPF_FMT(0, 2, 3, 0, 12)

/* 12 bit   YUV (8 bit Y plane followed by 8 bit quarter size V/U planes) */
#define GSPF_YV12 GSPF_FMT(0, 2, 3, 1, 12)

/* 12 bit   YUV (8 bit Y plane followed by one 16 bit quarter size Cb|Cr [7:0|7:0] plane) */
#define GSPF_NV12 GSPF_FMT(0, 2, 2, 0, 12)

/* 12 bit   YUV (8 bit Y plane followed by one 16 bit quarter size Cr|Cb [7:0|7:0] plane) */
#define GSPF_NV21 GSPF_FMT(0, 2, 2, 1, 12)

/* 16 bit   YUV (4 byte/ 2 pixel, macropixel contains CbYCrY [31:0]) */
#define GSPF_YUY2 GSPF_FMT(0, 2, 1, 0, 16)

/* 16 bit   YUV (4 byte/ 2 pixel, macropixel contains YCbYCr [31:0]) */
#define GSPF_UYVY GSPF_FMT(0, 2, 1, 1, 16)

/* 16 bit   YUV (8 bit Y plane followed by one 16 bit half width Cb|Cr [7:0|7:0] plane) */
#define GSPF_NV16 GSPF_FMT(0, 3, 2, 0, 16)

/* 32 bit  AYUV (4 byte, alpha 8@24, Y 8@16, Cb 8@8, Cr 8@0) */
#define GSPF_AYUV GSPF_FMT(0, 5, 1, 0, 32)

#define GSPF_YUV411SP	GSPF_FMT(0, 1, 2, 0, 12) /* for WonderMedia only */
#define GSPF_YUV420P	GSPF_I420
#define GSPF_YUV420SP	GSPF_NV12
#define GSPF_YUV422I	GSPF_YUY2
#define GSPF_YUV422SP	GSPF_NV16
#define GSPF_YUV444SP	GSPF_FMT(0, 4, 2, 0, 24) /* for WonderMedia only */
#define GSPF_VPU	GSPF_FMT(0, 7, 2, 0, 32) /* for WonderMedia only */

/* GE commands */
#define GECMD_BLIT		0x1
#define GECMD_TEXT		0x2
#define GECMD_BLIT_DMA		0x3 /* Obsoleted */
#define GECMD_BEZIER		0x4 /* Obsoleted */
#define GECMD_LINE		0x7 /* Obsoleted */
#define GECMD_ROTATE		0x8
#define GECMD_MIRROR		0x9
#define GECMD_DMA		0xa /* YC->RGB, WM8650 only */
#define GECMD_YUY2_YUV420	0xb
#define GECMD_C422_C420		0xc /* Obsoleted */
#define GECMD_C444_C420		0xd /* Obsoleted */
#define GECMD_ALPHA_BITBLT	0xe
#define GECMD_GOVR_DIRECT	0xf

/* AMX CSC table */
#define AMX_CSC_DEFAULT			0
#define AMX_CSC_RGB_YC_SDTV_16_235	1
#define AMX_CSC_RGB_YC_SDTV_0_255	2
#define AMX_CSC_RGB_YC_HDTV_16_235	3
#define AMX_CSC_RGB_YC_HDTV_0_255	4
#define AMX_CSC_RGB_YC_JFIF_0_255	5
#define AMX_CSC_RGB_YC_SMPTE_170M	6
#define AMX_CSC_RGB_YC_SMPTE_240M	7
#define AMX_CSC_RGB_BYPASS		8
#define AMX_CSC_YC_RGB_SDTV_16_235	9
#define AMX_CSC_YC_RGB_SDTV_0_255	10
#define AMX_CSC_YC_RGB_HDTV_16_235	11
#define AMX_CSC_YC_RGB_HDTV_0_255	12
#define AMX_CSC_YC_RGB_JFIF_0_255	13
#define AMX_CSC_YC_RGB_SMPTE_170M	14
#define AMX_CSC_YC_RGB_SMPTE_240M	15
#define AMX_CSC_YC_BYPASS		16

/* AMX CSC table (WM8650 only) */
#define AMX_CSC_SDTV_16_235	AMX_CSC_RGB_YC_SDTV_16_235
#define AMX_CSC_SDTV_0_255	AMX_CSC_RGB_YC_SDTV_0_255
#define AMX_CSC_HDTV_16_235	AMX_CSC_RGB_YC_HDTV_16_235
#define AMX_CSC_HDTV_0_255	AMX_CSC_RGB_YC_HDTV_0_255
#define AMX_CSC_JFIF_0_255	AMX_CSC_RGB_YC_JFIF_0_255
#define AMX_CSC_SMPTE_170M	AMX_CSC_RGB_YC_SMPTE_170M
#define AMX_CSC_SMPTE_240M	AMX_CSC_RGB_YC_SMPTE_240M

/* GE CSC table */
#define GE_CSC_DEFAULT			0
#define GE_CSC_RGB_YC_SDTV_16_235	1
#define GE_CSC_RGB_YC_SDTV_0_255	2
#define GE_CSC_RGB_YC_HDTV_16_235	3
#define GE_CSC_RGB_YC_HDTV_0_255	4
#define GE_CSC_RGB_YC_JFIF_0_255	5
#define GE_CSC_RGB_YC_SMPTE_170M	6
#define GE_CSC_RGB_YC_SMPTE_240M	7
#define GE_CSC_RGB_BYPASS		8
#define GE_CSC_YC_RGB_SDTV_16_235	9
#define GE_CSC_YC_RGB_SDTV_0_255	10
#define GE_CSC_YC_RGB_HDTV_16_235	11
#define GE_CSC_YC_RGB_HDTV_0_255	12
#define GE_CSC_YC_RGB_JFIF_0_255	13
#define GE_CSC_YC_RGB_SMPTE_170M	14
#define GE_CSC_YC_RGB_SMPTE_240M	15
#define GE_CSC_YC_BYPASS		16

#define GSCAPS_NONE		0x00000000
#define GSCAPS_GMP		0x00000001
#define GSCAPS_FB		0x00000002
#define GSCAPS_MB		0x00000004
#define GSCAPS_OS		0x00000008
#define GSCAPS_STATIC		0x00000010

#define GSCAPS_INTERLACE	0x00000100
#define GSCAPS_MOTION_VECTOR	0x00000200

/*
#define USE_GE_PWR_CTRL
*/

typedef struct ge_regs_3481 ge_regs_t;

typedef struct {
	void *mmio;
	unsigned int fd;
	unsigned int id;
	unsigned int config;
	unsigned int data;
	unsigned int loglevel;
	struct gmp *gmp;
	struct ge_plugin *plugin;
	void *priv;
} ge_info_t;

typedef struct {
	unsigned long addr;
	unsigned long xres;
	unsigned long yres;
	unsigned long xres_virtual;
	unsigned long yres_virtual;
	unsigned long x;
	unsigned long y;
	unsigned long pixelformat;
	unsigned long planesize[4];
	unsigned long color;
	unsigned long blitting_flags;
	unsigned long src_blend_func;
	unsigned long dst_blend_func;
	unsigned long src_color_key;
	unsigned long dst_color_key;
	unsigned long rop;
	unsigned long mmio;
	unsigned long caps;
} ge_surface_t;

typedef struct {
	unsigned long x;
	unsigned long y;
	unsigned long w;
	unsigned long h;
} ge_rect_t;

#ifdef __KERNEL__
extern wait_queue_head_t ge_wq;
#endif

extern ge_info_t *create_ge_info(void);
extern void release_ge_info(ge_info_t *geinfo);
extern int ge_sys_init(ge_info_t **geinfo, void *priv); /* deprecated */
extern int ge_sys_exit(ge_info_t *geinfo, void *priv);  /* deprecated */
extern int ge_get_chip_id(ge_info_t *geinfo, unsigned int *chip_id);
extern int ge_lock(ge_info_t *geinfo);
extern int ge_unlock(ge_info_t *geinfo);
extern int ge_trylock(ge_info_t *geinfo);
extern void ge_wait_sync_timeout(ge_info_t *geinfo, int timeout);
extern void ge_wait_sync(ge_info_t *geinfo);
extern void WAIT_PXD_INT(void);

extern int ge_set_src_csc(ge_info_t *geinfo, int cscid);
extern int ge_set_dst_csc(ge_info_t *geinfo, int cscid);
extern int ge_set_src_pixelformat(ge_info_t *geinfo, unsigned int pixelformat);
extern int ge_set_dst_pixelformat(ge_info_t *geinfo, unsigned int pixelformat);
extern int ge_set_destination(ge_info_t *geinfo, const ge_surface_t *dst);
extern int ge_set_source(ge_info_t *geinfo, const ge_surface_t *src);
extern int ge_set_mask(ge_info_t *geinfo, ge_surface_t *src);
extern int ge_set_command(ge_info_t *geinfo, unsigned int cmd,
	unsigned int rop);
extern unsigned int ge_get_color(ge_info_t *geinfo,
	unsigned int r, unsigned int g, unsigned int b, unsigned int a,
	unsigned int pixfmt);
extern void ge_set_color(ge_info_t *geinfo,
	unsigned int r, unsigned int g, unsigned int b, unsigned int a,
	unsigned int pixfmt);
extern void ge_set_sck(ge_info_t *geinfo,
	unsigned int r, unsigned int g, unsigned int b, unsigned int a,
	unsigned int pixfmt);
extern void ge_set_dck(ge_info_t *geinfo,
	unsigned int r, unsigned int g, unsigned int b, unsigned int a,
	unsigned int pixfmt);
extern int ge_cmd_blit(ge_info_t *geinfo);
extern int ge_cmd_fillrect(ge_info_t *geinfo);
extern int ge_cmd_rotate(ge_info_t *geinfo, unsigned int arc);
extern int ge_cmd_mirror(ge_info_t *geinfo, int mode);

extern int amx_show_surface(ge_info_t *geinfo, int id, ge_surface_t *s,
	int x, int y);
extern int amx_get_surface(ge_info_t *geinfo, int id, ge_surface_t *s);
extern int amx_hide_surface(ge_info_t *geinfo, int id);
extern int amx_set_colorkey(ge_info_t *geinfo, int id, int enable,
	unsigned int r, unsigned int g, unsigned int b, unsigned int pixfmt);
extern int amx_set_alpha(ge_info_t *geinfo, int id, unsigned int alpha);
extern int amx_enable_pixel_alpha_3445(ge_info_t *geinfo, int g1_en, int g2_en);
extern int amx_enable_pixel_alpha(ge_info_t *geinfo, int g1_en, int g2_en);
extern int amx_sync(ge_info_t *geinfo);
extern int amx_set_csc(ge_info_t *geinfo, int table_id);

/* WM3481 */
int ge_set_govr_source(ge_info_t *geinfo, const ge_surface_t *src,
		       int x, int y);
int ge_set_govr_destination(ge_info_t *geinfo, const ge_surface_t *des,
		       int x, int y);
int ge_set_govr_size(ge_info_t *geinfo, int w, int h);
int ge_set_direct_write(ge_info_t *geinfo, const ge_surface_t *dw);
void ge_set_govr_fixed_alpha(ge_info_t *geinfo, int src_hit, int des_hit,
	int src_alpha, int des_alpha);

#endif /* GE_REGS_H */


/* import ./include/ge_regs_ext.h */

#ifndef GE_REGS_EXT_H
#define GE_REGS_EXT_H

/* #include "ge_regs.h" */

/*
#define GE_BITS_PER_PIXEL(fmt) ((((fmt) + 0x10) & ~0xf) >> 1)
#define GE_BYTES_PER_PIXEL(fmt) ((((fmt) + 0x10) & ~0xf) >> 4)
*/
#define GE_BITS_PER_PIXEL(fmt)  GSPF_BITS_PER_PIXEL(fmt)
#define GE_BYTES_PER_PIXEL(fmt) GSPF_BYTES_PER_PIXEL(fmt)

/*
 * pixel color = sc * cf[sf] + dc * cf[df]
 * pixel alpha = sa * af[sf] + da * af[df]
 * sc = source color
 * sa = source alpha
 * dc = destination color
 * da = destination alpha
 * sf = source blend function
 * df = destination blend function
 * cf[x] = color factor for blend function x
 * af[x] = alpha factor for blend function x
 */
#define GSBF_UNKNOWN             0  /*                             */
#define GSBF_ZERO                1  /* cf:    0           af:    0 */
#define GSBF_ONE                 2  /* cf:    1           af:    1 */
#define GSBF_SRCALPHA            5  /* cf:   sa           af:   sa */
#define GSBF_INVSRCALPHA         6  /* cf: 1-sa           af: 1-sa */
#define GSBF_DESTALPHA           7  /* cf:   da           af:   da */
#define GSBF_INVDESTALPHA        8  /* cf: 1-da           af: 1-da */


/* Mapping blitting flags from DSBLIT to GSBLIT */
#define GSBLIT_NOFX 	 		0x00000000
#define GSBLIT_BLEND_ALPHACHANNEL 	0x00000001
#define GSBLIT_BLEND_COLORALPHA 	0x00000002
#define GSBLIT_SRC_COLORKEY 	 	0x00000008
#define GSBLIT_DST_COLORKEY 	 	0x00000010
#define GSBLIT_ROTATE90 	 	0x00002000
#define GSBLIT_ROTATE180 	 	0x00001000
#define GSBLIT_ROTATE270 	 	0x00004000
#define GSBLIT_ROP 		 	0x04000000

/* Ternary Raster Operations
 * http://msdn.microsoft.com/en-us/library/dd145130%28v=vs.85%29.aspx
 */

int ge_blend_enable(ge_info_t *geinfo, int enable);
int ge_set_src_blend(ge_info_t *geinfo, int blendfunc);
int ge_set_dst_blend(ge_info_t *geinfo, int blendfunc);
int ge_set_region(ge_info_t *geinfo, ge_surface_t *s,
	int x, int y, int w, int h);
int ge_clear(ge_info_t *geinfo, ge_surface_t *s, int r, int g, int b, int a);
void ge_rop3(ge_info_t *geinfo, const ge_surface_t *s, const ge_surface_t *d,
	int r, int g, int b, int a, int rop);

int ge_reset(ge_info_t *geinfo);
int ge_draw_colorbar(ge_info_t *geinfo, const ge_surface_t *s);
int ge_draw_colorbar_h(ge_info_t *geinfo, const ge_surface_t *s);
int ge_write_buf(ge_info_t *geinfo, unsigned int pa, unsigned int *buf,
	unsigned int len);

/*
int ge_yuy2_to_yuv420(ge_info_t *geinfo, ge_surface_t *yuy2s,
	ge_surface_t *ys, ge_surface_t *cs, int sel);
int ge_c422_to_c420(ge_info_t *geinfo, ge_surface_t *c422s,
	ge_surface_t *c420s);
int ge_c444_to_c420(ge_info_t *geinfo, ge_surface_t *c444s,
	ge_surface_t *c420s);
*/

void amx_wait_vsync(ge_info_t *geinfo);

#endif /* GE_REGS_EXT_H */

/* import ./include/ge_helper.h */

#ifndef GE_HELPER_H
#define GE_HELPER_H
/* #include <ge_regs.h> */

void ge_helper_print_vdo_framebuf(void *vfb);
void ge_helper_print_vdo_view(void *view);

void *ge_helper_create_vdo_view(void);
void ge_helper_release_vdo_view(void *vdo_view);
void ge_helper_get_vdo_view(void *vdo_view,
			    const ge_surface_t *src,
			    const ge_rect_t *sr,
			    const ge_rect_t *dr);
void ge_helper_set_vdo_view(const void *vdo_view,
			    ge_surface_t *src,
			    ge_rect_t *sr,
			    ge_rect_t *dr);

void *ge_helper_create_vdo_framebuf(void);
void ge_helper_release_vdo_framebuf(void *vdo_framebuf);
void ge_helper_get_vdo_framebuf(void *vdo_framebuf,
				const ge_surface_t *src,
				const ge_rect_t *sr);
void ge_helper_set_vdo_framebuf(const void *vdo_framebuf,
				ge_surface_t *src,
				ge_rect_t *sr);

#endif /* GE_HELPER_H */

/* import ./include/wgl.h */

#ifndef WGL_H
#define WGL_H
#ifdef __cplusplus
extern "C" {
#endif
/* #include <ge_regs.h> */
/* #include <ge_regs_ext.h> */
/* #include <ge_ioctl.h> */
/* #include <ge_log.h> */
/* #include <ge_helper.h> */

ge_surface_t *ge_create_primary_surface(ge_info_t *geinfo);
void ge_get_primary_surface(ge_info_t *geinfo, ge_surface_t *surface);

int ge_verify_surface(ge_info_t *geinfo, ge_surface_t *s);

ge_surface_t *ge_create_null_surface(
	ge_info_t *geinfo, int w, int h, int pixfmt);
ge_surface_t *ge_dup_surface(ge_info_t *geinfo, const ge_surface_t *s);
ge_surface_t *ge_create_surface(ge_info_t *geinfo, int w, int h, int pixfmt);
void ge_release_surface(ge_info_t *geinfo, ge_surface_t *surface);

void ge_lock_surface(ge_info_t *geinfo, ge_surface_t *surface, void **vaddr);
void ge_unlock_surface(ge_info_t *geinfo, ge_surface_t *surface);

int ge_blit_soft(ge_info_t *geinfo, const ge_surface_t *src,
	const ge_surface_t *dst, int x, int y);
int ge_blit_hard(ge_info_t *geinfo, const ge_surface_t *src,
	const ge_surface_t *dst, int x, int y);
int ge_blit_scl(ge_info_t *geinfo, const ge_surface_t *src,
	const ge_surface_t *dst, int x, int y);

int ge_blit(ge_info_t *geinfo, const ge_surface_t *s,
	const ge_surface_t *d, int x, int y);

int ge_stretch_blit(ge_info_t *geinfo, const ge_surface_t *s,
	const ge_surface_t *d, const ge_rect_t *sr, const ge_rect_t *dr);

int ge_rotate(ge_info_t *geinfo, const ge_surface_t *s,
	const ge_surface_t *d, int x, int y, int arc);

int ge_mirror(ge_info_t *geinfo, const ge_surface_t *s,
	const ge_surface_t *d, int x, int y, int mode);

/* alpha blit functions */
void ge_rgb_to_rgb(ge_info_t *geinfo, ge_surface_t *s,
	ge_surface_t *d, ge_surface_t *o);
void ge_yc_to_yc(ge_info_t *geinfo, ge_surface_t *s,
	ge_surface_t *d, ge_surface_t *o);
void ge_yc_to_rgb(ge_info_t *geinfo, ge_surface_t *s,
	ge_surface_t *d, ge_surface_t *o);
void ge_rgb_to_yc(ge_info_t *geinfo, ge_surface_t *s,
	ge_surface_t *d, ge_surface_t *o);

int ge_save_image(ge_info_t *geinfo, const ge_surface_t *s, const char *name);

#ifdef __cplusplus
}
#endif
#endif /* WGL_H */

#ifdef __cplusplus
}
#endif

#endif /* COM_GE_H */

